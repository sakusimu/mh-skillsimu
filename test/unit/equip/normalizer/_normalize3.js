'use strict';
const assert = require('power-assert');
const Normalizer = require('../../../../lib/equip/normalizer');
const myapp = require('../../../support/lib/driver-myapp');

describe('equip/normalizer/normalize3', () => {
    beforeEach(() => { myapp.initialize(); });

    describe('_normalize3()', () => {
        let n = new Normalizer();

        it('should do normalize3', () => {
            let combs = {
                'ジャギィＳメイル': [
                    { '攻撃': 3, '斬れ味': 0 }, { '攻撃': 2, '斬れ味': 1 } ],
                'バギィＳメイル': [
                    { '攻撃': 5, '斬れ味': 0 }, { '攻撃': 4, '斬れ味': 1 },
                    { '攻撃': 3, '斬れ味': 2 }, { '攻撃': 6, '斬れ味': 0 } ],
                'ジンオウメイル': [
                    { '攻撃': 0, '斬れ味': 2 } ],
                slot0: [
                    { '攻撃': 0, '斬れ味': 0 } ],
                slot3: [
                    { '攻撃': 3, '斬れ味': 0 }, { '攻撃': 2, '斬れ味': 1 },
                    { '攻撃': 1, '斬れ味': 2 }, { '攻撃': 0, '斬れ味': 3 },
                    { '攻撃': 4, '斬れ味': 0 }, { '攻撃': 3, '斬れ味': 1 },
                    { '攻撃': 5, '斬れ味': 0 }, { '攻撃': 0, '斬れ味': 4 } ],
                'シルバーソルメイル': [
                    { '攻撃': 3, '斬れ味': 1 }, { '攻撃': 2, '斬れ味': 2 },
                    { '攻撃': 1, '斬れ味': 3 }, { '攻撃': 4, '斬れ味': 1 } ]
            };
            let got = n._normalize3(combs);
            let exp = {
                'ジャギィＳメイル': [
                    { '攻撃': 3, '斬れ味': 0 }, { '攻撃': 2, '斬れ味': 1 } ],
                'バギィＳメイル': [
                    { '攻撃': 4, '斬れ味': 1 }, { '攻撃': 3, '斬れ味': 2 },
                    { '攻撃': 6, '斬れ味': 0 } ],
                'ジンオウメイル': [
                    { '攻撃': 0, '斬れ味': 2 } ],
                slot0: [
                    { '攻撃': 0, '斬れ味': 0 } ],
                slot3: [
                    { '攻撃': 1, '斬れ味': 2 }, { '攻撃': 3, '斬れ味': 1 },
                    { '攻撃': 5, '斬れ味': 0 }, { '攻撃': 0, '斬れ味': 4 } ],
                'シルバーソルメイル': [
                    { '攻撃': 2, '斬れ味': 2 }, { '攻撃': 1, '斬れ味': 3 },
                    { '攻撃': 4, '斬れ味': 1 } ]
            };
            assert.deepEqual(got, exp);
        });

        it('should do normalize3 if skill point is 0 or minus', () => {
            let combs = {
                'hoge': [
                    { '匠': 1, '斬れ味': -2 },
                    { '匠': 0, '斬れ味': 0 },
                    { '匠': -1, '斬れ味': 0 },
                    { '匠': 1, '斬れ味': -1 },
                    { '匠': 0, '斬れ味': 1 } ],
                'slot0': [
                    { '匠': 0, '斬れ味': 0 } ]
            };
            let got = n._normalize3(combs);
            let exp = {
                'hoge': [
                    { '匠': 1, '斬れ味': -1 }, { '匠': 0, '斬れ味': 1 } ],
                'slot0': [
                    { '匠': 0, '斬れ味': 0 } ]
            };
            assert.deepEqual(got, exp, 'case 2');
        });

        it('should do normalize3 if contain torsoUp', () => {
            let combs = {
                'ジャギィＳグリーヴ': [
                    { '攻撃': 5, '斬れ味': 0 }, { '攻撃': 4, '斬れ味': 1 } ],
                '胴系統倍加': [
                    { '胴系統倍加': 1 } ],
                slot0: [
                    { '攻撃': 0, '斬れ味': 0 } ],
                'シルバーソルグリーヴ': [
                    { '攻撃': 5, '斬れ味': 2 },
                    { '攻撃': 4, '斬れ味': 3 },
                    { '攻撃': 3, '斬れ味': 4 },
                    { '攻撃': 2, '斬れ味': 5 },
                    { '攻撃': 6, '斬れ味': 2 },
                    { '攻撃': 5, '斬れ味': 3 },
                    { '攻撃': 7, '斬れ味': 2 },
                    { '攻撃': 2, '斬れ味': 6 } ]
            };
            let got = n._normalize3(combs);
            let exp = {
                'ジャギィＳグリーヴ': [
                    { '攻撃': 5, '斬れ味': 0 }, { '攻撃': 4, '斬れ味': 1 } ],
                '胴系統倍加': [
                    { '胴系統倍加': 1 } ],
                slot0: [
                    { '攻撃': 0, '斬れ味': 0 } ],
                'シルバーソルグリーヴ': [
                    { '攻撃': 3, '斬れ味': 4 },
                    { '攻撃': 5, '斬れ味': 3 },
                    { '攻撃': 7, '斬れ味': 2 },
                    { '攻撃': 2, '斬れ味': 6 } ]
            };
            assert.deepEqual(got, exp);
        });
    });
});
